{
    "componentChunkName": "component---src-layout-post-tsx",
    "path": "/blog/how-i-create-github-token-manager",
    "result": {"data":{"mdx":{"id":"c6d4ce72-ed70-544a-828b-6f0a62eb0c0e","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How I Create - Github Token Manager\",\n  \"date\": \"2022-03-10T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"TL;DR\"), mdx(\"p\", null, \"It's just some simple \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CR\", mdx(\"del\", {\n    parentName: \"strong\"\n  }, \"U\"), \"D\"), \" using \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SQLite\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AES-CBC 128-bit\"), \" with \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"git\"), \" integration.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Project repository \\u279C \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/anasrar/gah\"\n  }, \"https://github.com/anasrar/gah\")), mdx(\"h3\", null, \"Github Token\"), mdx(\"p\", null, \"Back in December 2020, Github announce that token is require for any Git operations, start in August 13, 2021 [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/\"\n  }, \"blog post\"), \"].\"), mdx(\"p\", null, \"Although it's good you can set different permission and expire date on each token, I just don't want to copy token on text file every Git operations like my co-worker did, so this is why I create simple token manager.\"), mdx(\"h3\", null, \"Initial Goal\"), mdx(\"p\", null, \"The initial goal is just simple CLI CR\", mdx(\"del\", {\n    parentName: \"p\"\n  }, \"U\"), \"D who encrypt Github token and decrypt the token when I need without something like NodeJS and Python installed, just download the binary \\u279C add to PATH \\u279C done, and being able to move the database file from Linux to Windows and vice versa.\"), mdx(\"p\", null, \"That is why I choose C++ for this project, and I think just fun to learn more about C++.\"), mdx(\"h3\", null, \"Ingredients\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"C++ compiler \\u279C GCC for Linux and MSVC for Windows\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CMake \\u279C \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://cmake.org/\"\n  }, \"site\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"linuxdeployqt \\u279C \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/probonopd/linuxdeployqt\"\n  }, \"repository\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SQLite \\u279C \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.sqlite.org/index.html\"\n  }, \"site\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PicoSHA2 \\u279C \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/okdshin/PicoSHA2\"\n  }, \"repository\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"plusaes \\u279C \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/kkAyataka/plusaes\"\n  }, \"repository\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"argparse \\u279C \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/p-ranav/argparse\"\n  }, \"repository\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tabulate \\u279C \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/p-ranav/tabulate\"\n  }, \"repository\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"clip \\u279C \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/dacap/clip\"\n  }, \"repository\"))), mdx(\"p\", null, \"All ingredients pack into Git submodule except compiler, CMake, and linuxdeployqt.\"), mdx(\"h3\", null, \"Encryption\"), mdx(\"p\", null, \"Here some pseudo code in python syntax, just give you rough idea how I implement.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"token: str = \\\"ghp_TOKEN\\\"\\npassword: str = \\\"very_secure_password\\\"\\n\\nfinal_token: str = \\\"GAH_FLAG_\\\" + token # add flag to token for later decrypt check\\nhash_password: list[int] = sha256(password) # convert password to array of number (0 - 255)\\n\\n# ENCRYPT\\n\\nencrypted_size: list[int] = [len(final_token)] # the aes_decrypt need original string length\\nencrypted_token: list[int] = aes_encrypt(final_token, hash_password) # encrypt final_token with hash_password, resulting array of number 0 - 255\\n\\nfinal_encrypted_token: str = list_number_to_hex_string(encrypted_token + encrypted_size) # convert array number to hex string and store to database\\n\\n# DECRYPT\\n\\nlist_number_token: list[int] = hex_string_to_list_number(final_encrypted_token)\\n\\ndecrypted_size: int = list_number_token.pop()\\ndecrypted_token: str = aes_decrypt(list_number_token, hash_password, decrypted_size)\\n\\nif string_start_with(decrypted_token, \\\"GAH_FLAG_\\\"):\\n    print(string_replace(decrypted_token, \\\"GAH_FLAG_\\\", \\\"\\\"))\\nelse:\\n    print(\\\"password wrong\\\")\\n\\n\")), mdx(\"p\", null, \"Token format in database.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"\\n\\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252C\\u2500\\u2500\\u2500\\u2500\\u252C\\u2500\\u2500\\u2500\\u2500\\u252C\\u2500\\u2500\\u2500\\u2500\\u252C\\u2500\\u2500\\u2500\\u2500\\u252C\\u2500\\u2500\\u2500\\u2500\\u252C\\u2500\\u2500\\u2500\\u2500\\u252C\\u2500\\u2500\\u2500\\u2500\\u252C\\u2500\\u2500\\u2500\\u2500\\u2510\\n\\u2502 Encrypted Token In Hex \\u2502 FF \\u2502 00 \\u2502 00 \\u2502 00 \\u2502 00 \\u2502 00 \\u2502 00 \\u2502 00 \\u2502\\n\\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2518\\n                          \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u25BA\\n                            Token length 8 bytes in 8-bit hex\\n                                        Big-endian\\n\")), mdx(\"p\", null, \"You can see the C++ version \\u279C \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/anasrar/gah/blob/ee1e0de5975a7fa6cbf84694d47b0c929401a3b7/src/gah.cpp#L223\"\n  }, \"gah.cpp:223\"), \".\"), mdx(\"h3\", null, \"Git Integration\"), mdx(\"p\", null, \"Now we have fully functional what the initial goal is, store the token and copy to clipboard when we need it.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/post_images/0.png\",\n    \"alt\": \"Terminal Preview\",\n    \"title\": \"Terminal Preview\"\n  })), mdx(\"p\", null, \"Did you know you can set username and token in Github remote or Github clone but only support for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"HTTPS\"), \" protocol as far as I know, something like this.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"# git clone\\ngit clone https://username:token@github.com/username/repository.git\\n\\n# git push\\ngit push https://username:token@github.com/username/repository.git branch\\n\\n# git pull\\ngit pull https://username:token@github.com/username/repository.git branch\\n\")), mdx(\"p\", null, \"With that you can create something like this.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-python\"\n  }, \"command: str = \\\"git push https://\\\" + username + \\\":\\\" + token + \\\"@\\\" + remove_http(remote) + \\\" \\\" + branch;\\nexec(command);\\n\")), mdx(\"p\", null, \"And the result when implemented.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/post_images/1.png\",\n    \"alt\": \"Terminal Preview Push Command\",\n    \"title\": \"Terminal Preview Push Command\"\n  })), mdx(\"h3\", null, \"Binary File\"), mdx(\"p\", null, \"In Windows is pretty easy to build and distribute the binary file into single exe since all library is a static library, Linux in another hand is hard, like Linus Torvalds say in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DebConf 14_ QA with Linus Torvalds talk\"), \" [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://youtu.be/5PmHRSeA2c8?t=333\"\n  }, \"video\"), \" 05:33]\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We basically don't make binaries for Linux. Why? Because binaries for Linux desktop applications is a major f*ing pain in the ass.\")), mdx(\"p\", null, \"Basically most Linux applications using shared library (you can call it dependency), and the library it self should be installed and compatible with the binary (the library version when the binary it's build).\"), mdx(\"p\", null, \"And I found that AppImage is the solution (Flatpak and Snap is also good, but I prefer using AppImage because it easy to understand), AppImage is a Linux format file allow to pack all shared library that you need into execute binary that self extract and container when it execute, more information on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://appimage.org/\"\n  }, \"https://appimage.org/\"), \".\"), mdx(\"p\", null, \"linuxdeployqt allow to automatically pack all shared library that we need on binary file into single AppImage file, although linuxdeployqt mainly to generate AppImage for Qt application but it can use for general application, more information on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/probonopd/linuxdeployqt\"\n  }, \"https://github.com/probonopd/linuxdeployqt\"), \".\"), mdx(\"h3\", null, \"Github Actions\"), mdx(\"p\", null, \"Now the final thing is Github Actions, let the Github Actions compile both for Linux and Windows and automatically create release and upload the binary file, here's how I do it \\u279C \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/anasrar/gah/blob/main/.github/workflows/build_release.yml\"\n  }, \"build_release.yml\"), \", and also others automation for CI and PR test.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"AND IT'S FREE\"), \" for public repository as far as I know.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://c.tenor.com/sP4SQzZ4I1AAAAAM/minecraft-free-real-estate.gif\",\n    \"alt\": \"It's Free Real Estate\",\n    \"title\": \"It's Free Real Estate\"\n  })), mdx(\"h4\", null, \"Action Flow\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"\\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n\\u2502  Build Linux  \\u251C\\u2500\\u2500\\u2500\\u2510\\n\\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518   \\u2502   \\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510   \\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510   \\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n                    \\u251C\\u2500\\u2500\\u25BA\\u2502 Test Linux \\u251C\\u2500\\u2500\\u25BA\\u2502 Test Windows \\u251C\\u2500\\u2500\\u25BA\\u2502 Release \\u2502\\n\\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510   \\u2502   \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518   \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518   \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\\u2502 Build Windows \\u251C\\u2500\\u2500\\u2500\\u2518\\n\\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\n\")), mdx(\"h3\", null, \"Roadmap\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add more git command flags\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create bash auto completion\")), mdx(\"h3\", null, \"What I Learn\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use fixed width integer types for better portability and serialization \\u279C \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.cppreference.com/w/c/types/integer\"\n  }, \"https://en.cppreference.com/w/c/types/integer\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Shared and static library.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CMake configuration.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AppImage structure \\u279C \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.appimage.org/packaging-guide/manual.html\"\n  }, \"https://docs.appimage.org/packaging-guide/manual.html\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Github actions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Many more.\")), mdx(\"h3\", null, \"Conclusion\"), mdx(\"p\", null, \"It was fun learning C++, CMake, and AppImage in this project, the thing that bothering me is I'm too lazy to write any validation command before execute, resulting security concern when user input malicious string.\"), mdx(\"p\", null, \"But as long the initial goal is achieve, it's ok for me.\"), mdx(\"p\", null, \"Thank you so much for reading this post, feel free to contribute to this project\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Project repository \\u279C \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/anasrar/gah\"\n  }, \"https://github.com/anasrar/gah\"), \", have a nice day.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"How I Create - Github Token Manager","date":"2022-03-10T00:00:00.000Z"}},"site":{"siteMetadata":{"description":"Full Stack Developer","title":"Anas Rin"}}},"pageContext":{"id":"c6d4ce72-ed70-544a-828b-6f0a62eb0c0e"}},
    "staticQueryHashes": []}