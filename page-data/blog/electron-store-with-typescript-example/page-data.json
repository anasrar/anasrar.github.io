{
    "componentChunkName": "component---src-layout-post-tsx",
    "path": "/blog/electron-store-with-typescript-example",
    "result": {"data":{"mdx":{"id":"59567c8f-ad62-5e5c-a6fc-a1acaae2e48e","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"electron-store with TypeScript Example\",\n  \"date\": \"2022-04-01T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Simple data persistence for your Electron app or module - Save and load user preferences, app state, cache, etc.\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/electron-store\"\n  }, \"electron-store\"))), mdx(\"p\", null, \"Below some example how to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/electron-store\"\n  }, \"electron-store\"), \" in TypeScript and using Schema for validation.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"import Store, { Schema } from 'electron-store';\\n\\ninterface Dummy {\\n  someObject: {\\n    someString: string;\\n  };\\n  someNumber: number;\\n  someEnumString: 'one' | 'two' | 'three';\\n}\\n\\nconst schema: Schema<Dummy> = {\\n  someObject: {\\n    type: 'object',\\n    properties: {\\n      someString: {\\n        type: 'string',\\n        default: 'string inside object',\\n      },\\n    },\\n    default: {}, // electron-store need this for object type\\n    required: ['someString'],\\n  },\\n  someNumber: {\\n    type: 'number',\\n    minimum: 1,\\n    maximum: 100,\\n    default: 50,\\n  },\\n  someEnumString: {\\n    type: 'string',\\n    enum: ['one', 'two', 'three'],\\n    default: 'two',\\n  },\\n};\\n\\nconst store = new Store<Dummy>({ schema });\\n\\nconsole.table(store.get('someObject'));\\n// \\u250C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510\\n// \\u2502  (index)   \\u2502         Values         \\u2502\\n// \\u251C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253C\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524\\n// \\u2502 someString \\u2502 'string inside object' \\u2502\\n// \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\\nconsole.log(store.get('someNumber'));\\n// 50\\nconsole.log(store.get('someEnumString'));\\n// two\\ntry {\\n  store.set('someNumber', 200);\\n} catch (err) {\\n  console.error(err);\\n  // Error: Config schema violation: `someNumber` must be <= 100\\n}\\n\\ntry {\\n  store.set('someEnumString', 'four');\\n} catch (err) {\\n  console.error(err);\\n  // Error: Config schema violation: `someEnumString` must be equal to one of the allowed values\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"electron-store with TypeScript Example","date":"2022-04-01T00:00:00.000Z"}},"site":{"siteMetadata":{"description":"Full Stack Developer","title":"Anas Rin"}}},"pageContext":{"id":"59567c8f-ad62-5e5c-a6fc-a1acaae2e48e"}},
    "staticQueryHashes": []}